const fs= require('fs');
const axios= require('axios');

class Busquedas {

historial=[];
dbpath= './DB/database.json';

constructor() {
this.leerdb();
}

get historialcap() {
    return this.historial.map(lugar => {
        let palabras = lugar.split(' ');

        palabras = palabras.map(p=> p[0].toUpperCase() + p.substring(1));

        return palabras.join(' ');
    })
}

get paramapbox() {
    return {
'access_token': process.env.MAPBOX_KEY,
        'limit':5,
        'language': 'es'
    }
}

async ciudad(lugar= '') {

    try {


        const instance= axios.create({
            baseURL: `https://api.mapbox.com/geocoding/v5/mapbox.places/${ lugar }.json`,
            params: this.paramapbox
        });

    const resp= await instance.get();
    return resp.data.features.map( lugar => ({
        id: lugar.id,
        nombre: lugar.place_name, 
        lng: lugar.center[0],
        lat: lugar.center[1]
    }));



    } catch (error) {
      return[];  
    }

   
}

get openweather() {
    return {
'appid': process.env.OPENWEATHER_KEY,
'units': 'metric',
'lang': 'es'
    }
}

async climaL( lat, lon) {

    try {


        const instance= axios.create({
            baseURL: `https://api.openweathermap.org/data/2.5/weather`,
            params: {...this.openweather, lat, lon}
        });

    const respuesta= await instance.get();
    const { weather, main} = respuesta.data;
    return {
        weather: weather[0].description,
        temp: main.temp,
        min: main.temp_min,
        max: main.temp_max
    };



    } catch (error) {
      console.log(error);
    }


}

agregarhistorial( lugar='') {
  
    if( this.historial.includes(lugar.toLocaleLowerCase())){
        return;
    }

    this.historial= this.historial.splice(0,9);
    this.historial.unshift(lugar.toLocaleLowerCase());
    this.guardardb();
}

guardardb() {
    const payload= {
        historial: this.historial
    };

    fs.writeFileSync(this.dbpath, JSON.stringify(payload));

}



leerdb() {
    if( !fs.existsSync(this.dbpath)) {
        return null;
    }

    const info= fs.readFileSync(this.dbpath, {encoding: 'utf-8'});
    const data= JSON.parse(info);

    this.historial= data.historial;


}

}

module.exports = Busquedas